<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>video call webRtc</title>
</head>
<body>
    <video id='video1' height="500" width="500" controls ></video>
    <video id='video2' height="500" width="500" controls ></video>
    <!-- <h2 id='text1'></h1> -->
    <textarea rows="1" cols="300" id='text1'></textarea>
    <input id='text2'></input>
    <button id='btnConnect' >call</button>
    <!-- <button onClick="openCamera()" >openCamera</button> -->
        
</body>
<pre id="outgoing"></pre>
    <!-- <script>
        const { PeerServer } = require('peer');

        const customGenerationFunction = () => (Math.random().toString(36) + '0000000000000000000').substr(2, 16);

        const peerServer = PeerServer({
        port: 4000,
        path: '/peer',
        generateClientId: customGenerationFunction
        });
        console.log('customGenerationFunction', customGenerationFunction)
    </script> -->
    <script src="https://unpkg.com/peerjs@1.2.0/dist/peerjs.min.js"></script>

    <script>
        // const Peer = require('peer')
        const peer = new Peer(getIdPeer(), {host: 'git.heroku.com/vuhoangduy.git', port: 4000, secure: true, key: 'peerjs'})

        function getIdPeer(){
            const customGenerationFunction =  (Math.random().toString(36) + '0000000000000000000').substr(2, 16);
            document.getElementById('text1').value = customGenerationFunction;
            return customGenerationFunction
        }
        


        playVideo = (stream, id) => {
            const video = document.getElementById(id);
            console.log('videozzz', video)
            video.srcObject = stream;
            video.onloadedmetadata = function() {video.play()}
        }

        // navigator.mediaDevices.getUserMedia({audio: true, video: true}).then((stream) => {
        //     call.answer(stream)
        //     call.on('stream', playVideo(stream, 'video2'))
        // })
        var getUserMedia = navigator.getUserMedia
        document.getElementById('btnConnect').onclick = click    
        function click(){
        getUserMedia({audio: false, video: true},
        function(stream) {
            // .then((stream) => {
            playVideo(stream, 'video1')
            const id = document.getElementById("text2").value
            console.log('id', id)
            const call = peer.call(id, stream);
            // playVideo(stream, 'video1')
            call.on('stream', function(remoteStream){
                playVideo(remoteStream, 'video2')
                    })
                })
            }
            // const peer = new SimplePeer({
            //     initiator: location.hash === '#1',
            //     trickle: false,
            //     stream,
            // })
           

            // console.log('oooooo', peer)

            // peer.on('signal', token => {
            //     console.log('123123', token);
            //     document.getElementById('text1').value = JSON.stringify(token);

                // const div = document.getElementById('text1');
                // div.innerHTML += JSON.stringify(token);
            // })

            // peer.on('stream', friendStream => {
            //     console.log('zzzxxxx')

            //     playVideo(friendStream, 'video2')
            //     })
            // document.getElementById('btnConnect').onclick = click;
            // function click() {
            //     console.log('qqqqqq', document.getElementById("text2").value);
                
            //     const signalConnect = JSON.parse(`${document.getElementById("text2").value}`);
            //     console.log('ggg', signalConnect, document.getElementById("text2").value);
            //     peer.signal(signalConnect)
            // }
            // })
            // .catch((err) => {
            // console.log('err', err)
            // })
        
    </script>
</html>